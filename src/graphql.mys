from graphql import Document
from graphql import Definition
from graphql import OperationDefinition
from graphql import Field
from graphql import Selection
from graphql import Argument
from .database import Database
from .database import Release
from .statistics import Statistics

class RequestError(Error):
    message: string

func _format_item(name: string, value: string) -> string:
    return f"\"{name}\":{value}"

func _format_object(items: [string]) -> string:
    response = "{"
    response += ",".join(items)
    response += "}"

    return response

class GraphQL:
    _database: Database
    _statistics: Statistics

    func __init__(self, database: Database, statistics: Statistics):
        self._database = database
        self._statistics = statistics

    func _resolve_package(self,
                          arguments: [Argument],
                          selections: [Selection]) -> string:
        if arguments is None or selections is None:
            raise RequestError("Bad package.")

        if len(arguments) != 1 or arguments[0].name != "name":
            raise RequestError("No package name.")

        argument = arguments[0]

        if argument.value is None:
            raise RequestError("No package name value.")

        package_name = argument.value
        package = self._database.get_package(package_name)

        if package is None:
            raise RequestError(f"Package '{package_name}' not found.")

        items: [string] = []

        for selection in selections:
            value: string = None

            match selection.field.name:
                case "name":
                    value = f"\"{package.name}\""
                case "builds":
                    match package.builds:
                        case "yes":
                            value = "true"
                        case "no":
                            value = "false"
                        case _:
                            value = "null"
                case "number_of_downloads":
                    value = str(package.number_of_downloads)
                case "coverage":
                    total_path = self._database.make_path(
                        f"standard-library/{package_name}/total.txt")

                    try:
                        value = total_path.read_text().strip()
                    except Error:
                        raise RequestError("No coverage found.")
                case "latest_release":
                    value = self._resolve_package_latest_release(
                        package.latest_release,
                        selection.field.selections)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            items.append(_format_item(selection.field.name, value))

        return _format_object(items)

    func _resolve_package_latest_release(self,
                                         release: Release,
                                         selections: [Selection]) -> string:
        if selections is None:
            raise RequestError("Bad package latest release.")

        items: [string] = []

        for selection in selections:
            value: string = None

            match selection.field.name:
                case "version":
                    value = f"\"{release.version}\""
                case "description":
                    value = f"\"{release.description}\""
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            items.append(_format_item(selection.field.name, value))

        return _format_object(items)

    func _resolve_standard_library(self, selections: [Selection]) -> string:
        if selections is None:
            raise RequestError("Bad standard_library.")

        items: [string] = []

        for selection in selections:
            value: string = None

            match selection.field.name:
                case "package":
                    value = self._resolve_package(selection.field.arguments,
                                                  selection.field.selections)
                case "packages":
                    value = self._resolve_packages()
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            items.append(_format_item(selection.field.name, value))

        return _format_object(items)

    func _resolve_statistics(self, selections: [Selection]) -> string:
        if selections is None:
            raise RequestError("Bad statistics request.")

        items: [string] = []

        for selection in selections:
            value: string = None

            match selection.field.name:
                case "start_date_time":
                    value = f"\"{self._statistics.start_date_time}\""
                case "total_number_of_requests":
                    value = str(sum([
                        count
                        for _, count in self._statistics.requests.count
                    ]))
                case "number_of_unique_visitors":
                    value = str(len(self._statistics.clients_ip_addresses))
                case "number_of_graphql_requests":
                    value = str(self._statistics.number_of_graphql_requests)
                case "no_idle_client_handlers":
                    value = str(self._statistics.no_idle_client_handlers)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            items.append(_format_item(selection.field.name, value))

        return _format_object(items)

    func _resolve_packages(self) -> string:
        response = "["
        response += ",".join([f"\"{name}\"" for name in self._database.get_packages()])
        response += "]"

        return response

    func resolve_query(self, document: Document) -> string:
        if len(document.definitions) == 0:
            raise RequestError("No definition.")

        selections = (document
                      .definitions[0]
                      .executable_definition
                      .operation_definition
                      .selections)
        items: [string] = []

        for selection in selections:
            value: string = None

            match selection.field.name:
                case "statistics":
                    value = self._resolve_statistics(selection.field.selections)
                case "standard_library":
                    value = self._resolve_standard_library(
                        selection.field.selections)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            items.append(_format_item(selection.field.name, value))

        return f"{{\"data\":{_format_object(items)}}}"
