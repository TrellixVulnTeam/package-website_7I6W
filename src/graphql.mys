from graphql import Document
from graphql import Definition
from graphql import OperationDefinition
from graphql import Field
from graphql import Selection
from graphql import Argument
from .database import Database
from .database import Release
from .database import Package
from .statistics import Statistics

class RequestError(Error):
    message: string

class Response:
    _parts: [string]

    func __init__(self):
        self._parts = []

    func format(self) -> string:
        return "".join(self._parts)

    func object_begin(self):
        self._parts.append("{")

    func object_end(self):
        if self._parts[-1] == ",":
            self._parts[-1] = "}"
        else:
            self._parts.append("}")

    func object_append_key(self, key: string):
        self._parts.append(f"\"{key}\":")

    func list_begin(self):
        self._parts.append("[")

    func list_end(self):
        if self._parts[-1] == ",":
            self._parts[-1] = "]"
        else:
            self._parts.append("]")

    func append(self, value: string):
        self._parts.append(value)

    func append_string(self, value: string):
        self._parts.append(f"\"{value}\"")

    func append_comma(self):
        self._parts.append(",")

class GraphQL:
    _database: Database
    _statistics: Statistics

    func __init__(self, database: Database, statistics: Statistics):
        self._database = database
        self._statistics = statistics

    func _get_package(self, name: string) -> Package:
        package = self._database.get_package(name)

        if package is None:
            raise RequestError(f"Package '{name}' not found.")

        return package

    func _resolve_package_type(self,
                               response: Response,
                               package_name: string,
                               selections: [Selection]):
        if selections is None:
            raise RequestError("Bad package.")

        package = self._get_package(package_name)
        response.object_begin()

        for selection in selections:
            response.object_append_key(selection.field.name)

            match selection.field.name:
                case "name":
                    response.append_string(package.name)
                case "builds":
                    match package.builds:
                        case "yes":
                            value = "true"
                        case "no":
                            value = "false"
                        case _:
                            value = "null"

                    response.append(value)
                case "number_of_downloads":
                    response.append(str(package.number_of_downloads))
                case "coverage":
                    total_path = self._database.make_path(
                        f"standard-library/{package_name}/coverage/total.txt")

                    try:
                        value = total_path.read_text().strip()
                    except Error:
                        value = "null"

                    response.append(value)
                case "latest_release":
                    self._resolve_package_latest_release(
                        response,
                        package.latest_release,
                        selection.field.selections)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            response.append_comma()

        response.object_end()

    func _resolve_package(self,
                          response: Response,
                          arguments: [Argument],
                          selections: [Selection]):
        if arguments is None:
            raise RequestError("Bad package.")

        if len(arguments) != 1 or arguments[0].name != "name":
            raise RequestError("No package name.")

        argument = arguments[0]

        if argument.value is None:
            raise RequestError("No package name value.")

        self._resolve_package_type(response, argument.value, selections)

    func _resolve_package_latest_release(self,
                                         response: Response,
                                         release: Release,
                                         selections: [Selection]):
        if selections is None:
            raise RequestError("Bad package latest release.")

        response.object_begin()

        for selection in selections:
            response.object_append_key(selection.field.name)

            match selection.field.name:
                case "version":
                    response.append_string(release.version)
                case "description":
                    response.append_string(release.description)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            response.append_comma()

        response.object_end()

    func _resolve_standard_library(self, response: Response, selections: [Selection]):
        if selections is None:
            raise RequestError("Bad standard_library.")

        response.object_begin()

        for selection in selections:
            response.object_append_key(selection.field.name)

            match selection.field.name:
                case "package":
                    self._resolve_package(response,
                                          selection.field.arguments,
                                          selection.field.selections)
                case "packages":
                    self._resolve_packages(response, selection.field.selections)
                case "number_of_packages":
                    self._resolve_number_of_packages(response)
                case "number_of_downloads":
                    self._resolve_number_of_downloads(response)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            response.append_comma()

        response.object_end()

    func _resolve_statistics(self, response: Response, selections: [Selection]):
        if selections is None:
            raise RequestError("Bad statistics request.")

        response.object_begin()

        for selection in selections:
            response.object_append_key(selection.field.name)

            match selection.field.name:
                case "start_date_time":
                    response.append_string(
                        str(self._statistics.start_date_time))
                case "total_number_of_requests":
                    response.append(
                        str(sum([
                            count
                            for _, count in self._statistics.requests.count
                        ])))
                case "number_of_unique_visitors":
                    response.append(
                        str(len(self._statistics.clients_ip_addresses)))
                case "number_of_graphql_requests":
                    response.append(
                        str(self._statistics.number_of_graphql_requests))
                case "no_idle_client_handlers":
                    response.append(
                        str(self._statistics.no_idle_client_handlers))
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            response.append_comma()

        response.object_end()

    func _resolve_packages(self, response: Response, selections: [Selection]):
        if selections is None:
            raise RequestError("Bad packages request.")

        response.list_begin()

        for name in self._database.get_packages():
            self._resolve_package_type(response, name, selections)
            response.append_comma()

        response.list_end()

    func _resolve_number_of_packages(self, response: Response):
        response.append(str(len(self._database.get_packages())))

    func _resolve_number_of_downloads(self, response: Response):
        number_of_downloads = 0

        for name in self._database.get_packages():
            number_of_downloads += self._get_package(name).number_of_downloads

        response.append(str(number_of_downloads))

    func resolve_query(self, document: Document) -> string:
        if len(document.definitions) == 0:
            raise RequestError("No definition.")

        selections = (document
                      .definitions[0]
                      .executable_definition
                      .operation_definition
                      .selections)
        response = Response()
        response.object_begin()
        response.object_append_key("data")
        response.object_begin()

        for selection in selections:
            response.object_append_key(selection.field.name)

            match selection.field.name:
                case "statistics":
                    self._resolve_statistics(response, selection.field.selections)
                case "standard_library":
                    self._resolve_standard_library(response,
                                                   selection.field.selections)
                case _ as name:
                    raise RequestError(f"Bad field '{name}'.")

            response.append_comma()

        response.object_end()
        response.object_end()

        return response.format()
