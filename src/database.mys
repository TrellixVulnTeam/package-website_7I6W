from sqlite import Database as SqliteDatabase
from sqlite import Statement

class Package:
    package_id: i64
    name: string
    releases: [Release]

class Release:
    version: string

class Database:
    _database: SqliteDatabase
    _create_package: Statement
    _get_package: Statement
    _get_packages: Statement
    _get_releases: Statement
    _add_release: Statement

    def __init__(self):
        self._database = SqliteDatabase("website.sqlite")

        self._database.execute("CREATE TABLE IF NOT EXISTS packages("
                               "package_id INTEGER PRIMARY KEY,"
                               "name TEXT NOT NULL UNIQUE"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS releases("
                               "release_id INTEGER PRIMARY KEY,"
                               "package_id INTEGER,"
                               "version TEXT NOT NULL,"
                               "UNIQUE(package_id, version)"
                               ")")

        statement = self._database.prepare("SELECT COUNT(*) FROM packages")

        if statement.fetch():
            print("Number of packages:", statement.column_int(0))

        self._get_package = self._database.prepare(
            "SELECT * FROM packages WHERE name == ?")
        self._get_packages = self._database.prepare(
            "SELECT (name) FROM packages")
        self._get_releases = self._database.prepare(
            "SELECT * FROM releases WHERE package_id == ?")
        self._create_package = self._database.prepare(
            "INSERT INTO packages (name) VALUES(?)")
        self._add_release = self._database.prepare(
            "INSERT OR IGNORE INTO releases (package_id, version) VALUES(?, ?)")

    def create_package(self, name: string):
        self._create_package.bind_string(1, name)
        self._create_package.execute()

    def get_package(self, name: string) -> Package:
        self._get_package.bind_string(1, name)

        if not self._get_package.fetch():
            return None

        package = Package(self._get_package.column_int(0),
                          self._get_package.column_string(1),
                          [])
        self._get_package.fetch()

        self._get_releases.bind_int(1, package.package_id)

        while self._get_releases.fetch():
            package.releases += Release(self._get_releases.column_string(2))

        return package

    def get_packages(self) -> [string]:
        packages: [string] = []

        while self._get_packages.fetch():
            packages += self._get_packages.column_string(0)

        return packages

    def add_package_release(self, package_id: i64, version: string):
        self._add_release.bind_int(1, package_id)
        self._add_release.bind_string(2, version)
        self._add_release.execute()
