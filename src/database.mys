from sqlite import Database as SqliteDatabase
from sqlite import Statement

class Package:
    package_id: i64
    name: string
    releases: [Release]

class Release:
    version: string

class Database:
    _database: SqliteDatabase
    _get_package: Statement
    _get_releases: Statement

    def __init__(self):
        self._database = SqliteDatabase("website.sqlite")

        self._database.execute("CREATE TABLE packages("
                               "package_id INTEGER PRIMARY KEY,"
                               "name TEXT NOT NULL UNIQUE"
                               ")")
        self._database.execute("CREATE TABLE releases("
                               "release_id INTEGER PRIMARY KEY,"
                               "package_id INTEGER,"
                               "version TEXT NOT NULL"
                               ")")

        # Dummy data for test.
        self._database.execute("INSERT INTO packages (name) VALUES('os')")
        self._database.execute(
            "INSERT INTO releases (package_id, version) VALUES(1, '0.1.0')")
        self._database.execute(
            "INSERT INTO releases (package_id, version) VALUES(1, '0.2.0')")
        self._database.execute("INSERT INTO packages (name) VALUES('random')")
        self._database.execute("INSERT INTO packages (name) VALUES('sqlite')")

        statement = self._database.prepare("SELECT COUNT(*) FROM packages")

        if statement.fetch():
            print("Number of packages:", statement.column_int(0))

        self._get_package = self._database.prepare(
            "SELECT * FROM packages WHERE name == ?")
        self._get_releases = self._database.prepare(
            "SELECT * FROM releases WHERE package_id == ?")

    def get_package(self, name: string) -> Package:
        self._get_package.bind_string(1, name)

        if not self._get_package.fetch():
            return None

        package = Package(self._get_package.column_int(0),
                          self._get_package.column_string(1),
                          [])
        self._get_package.fetch()

        self._get_releases.bind_int(1, package.package_id)

        while self._get_releases.fetch():
            package.releases += Release(self._get_releases.column_string(2))

        return package
