from sqlite import Database as SqliteDatabase
from sqlite import Statement
from os.path import Path
from fiber import Lock

class Package:
    package_id: i64
    name: string
    latest_release: Release?
    releases: [Release]
    token: string
    number_of_downloads: i64
    builds: string

class Release:
    release_id: i64
    version: string
    description: string

class Mys:
    latest_release: MysRelease?
    token: string

class MysRelease:
    release_id: i64
    version: string

class Database:
    _database: SqliteDatabase
    _create_mys: Statement
    _modify_mys: Statement
    _get_mys: Statement
    _get_mys_release: Statement
    _get_mys_release_by_id: Statement
    _add_mys_release: Statement
    _create_package: Statement
    _delete_package: Statement
    _delete_all_package_releases: Statement
    _modify_package: Statement
    _increment_package_download_count: Statement
    _set_package_builds: Statement
    _get_package: Statement
    _get_packages: Statement
    _get_package_release: Statement
    _get_package_release_by_id: Statement
    _get_package_releases: Statement
    _add_package_release: Statement
    _get_dependents: Statement
    _remove_dependents: Statement
    _add_dependent: Statement
    _clear_activities: Statement
    _add_activity: Statement
    _get_activities: Statement
    root_directory: Path
    _lock: Lock

    func __init__(self, root_directory: Path):
        self.root_directory = root_directory
        self._lock = Lock()
        root_directory.mkdir(exists_ok=True)

        self._database = SqliteDatabase(self.make_path("website.sqlite"))

        self._database.execute("CREATE TABLE IF NOT EXISTS mys("
                               "mys_id INTEGER PRIMARY KEY,"
                               "latest_release_id INTEGER DEFAULT -1,"
                               "token TEXT NOT NULL"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS mys_releases("
                               "release_id INTEGER PRIMARY KEY,"
                               "version TEXT NOT NULL UNIQUE"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS packages("
                               "package_id INTEGER PRIMARY KEY,"
                               "name TEXT NOT NULL UNIQUE,"
                               "latest_release_id INTEGER DEFAULT -1,"
                               "token TEXT NOT NULL,"
                               "number_of_downloads INTEGER DEFAULT 0,"
                               "builds TEXT"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS releases("
                               "release_id INTEGER PRIMARY KEY,"
                               "package_id INTEGER,"
                               "version TEXT NOT NULL,"
                               "description TEXT NOT NULL,"
                               "UNIQUE(package_id, version)"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS dependents("
                               "name TEXT NOT NULL,"
                               "user TEXT NOT NULL,"
                               "UNIQUE(name, user)"
                               ")")
        self._database.execute("CREATE TABLE IF NOT EXISTS activities("
                               "date TEXT NOT NULL,"
                               "kind TEXT NOT NULL,"
                               "message TEXT NOT NULL"
                               ")")

        statement = self._database.prepare("SELECT COUNT(*) FROM packages")
        statement.fetch()
        print("Number of packages:", statement.column_int(0))

        self._create_mys = self._database.prepare(
            "INSERT INTO mys (token) VALUES(?)")
        self._modify_mys = self._database.prepare(
            "UPDATE mys SET latest_release_id = ?")
        self._get_mys = self._database.prepare("SELECT * FROM mys")
        self._get_mys_release_by_id = self._database.prepare(
            "SELECT * FROM mys_releases WHERE release_id == ?")
        self._add_mys_release = self._database.prepare(
            "INSERT OR IGNORE INTO mys_releases (version) VALUES(?)")
        self._get_mys_release = self._database.prepare(
            "SELECT * FROM mys_releases WHERE version == ?")
        self._get_package = self._database.prepare(
            "SELECT * FROM packages WHERE name == ?")
        self._get_packages = self._database.prepare(
            "SELECT (name) FROM packages ORDER BY name ASC")
        self._get_package_release = self._database.prepare(
            "SELECT * FROM releases WHERE package_id == ? AND version == ?")
        self._get_package_release_by_id = self._database.prepare(
            "SELECT * FROM releases WHERE release_id == ?")
        self._get_package_releases = self._database.prepare(
            "SELECT * FROM releases WHERE package_id == ?")
        self._create_package = self._database.prepare(
            "INSERT INTO packages (name, token) VALUES(?, ?)")
        self._delete_package = self._database.prepare(
            "DELETE FROM packages WHERE name = ?")
        self._delete_all_package_releases = self._database.prepare(
            "DELETE FROM releases WHERE package_id = ?")
        self._modify_package = self._database.prepare(
            "UPDATE packages SET latest_release_id = ? WHERE name == ?")
        self._increment_package_download_count = self._database.prepare(
            "UPDATE packages SET number_of_downloads = number_of_downloads + 1 "
            "WHERE name == ?")
        self._set_package_builds = self._database.prepare(
            "UPDATE packages SET builds = ? WHERE name == ?")
        self._add_package_release = self._database.prepare(
            "INSERT OR IGNORE INTO releases (package_id, version, description) "
            "VALUES(?, ?, ?)")
        self._get_dependents = self._database.prepare(
            "SELECT (user) FROM dependents WHERE name == ?")
        self._remove_dependents = self._database.prepare(
            "DELETE FROM dependents WHERE user == ?")
        self._add_dependent = self._database.prepare(
            "INSERT INTO dependents (name, user) VALUES (?, ?)")
        self._clear_activities = self._database.prepare(
            "DELETE FROM activities")
        self._add_activity = self._database.prepare(
            "INSERT INTO activities (date, kind, message) VALUES(?, ?, ?)")
        self._get_activities = self._database.prepare(
            "SELECT * FROM activities")

        self.make_path("package").mkdir(exists_ok=True)

    func begin_transaction(self):
        self._lock.acquire()
        self._database.execute("BEGIN TRANSACTION")

    func commit_transaction(self):
        self._database.execute("COMMIT")
        self._lock.release()

    func rollback_transaction(self):
        self._database.execute("ROLLBACK")
        self._lock.release()

    func make_path(self, path: string) -> Path:
        """Prepend the database root directory path to given path. Given path
        must not start with a slash.

        """

        return self.root_directory.join(path)

    func create_package(self, name: string, token: string):
        self._create_package.bind_string(1, name)
        self._create_package.bind_string(2, token)
        self._create_package.execute()

    func delete_package(self, package: Package):
        self._delete_package.bind_string(1, package.name)
        self._delete_package.execute()
        self._delete_all_package_releases.bind_int(1, package.package_id)
        self._delete_package.execute()

    func modify_package(self, package: Package, latest_release: Release):
        self._modify_package.bind_int(1, latest_release.release_id)
        self._modify_package.bind_string(2, package.name)
        self._modify_package.execute()

    func increment_package_download_count(self, package_name: string):
        self._increment_package_download_count.bind_string(1, package_name)
        self._increment_package_download_count.execute()

    func set_package_builds(self, package_name: string, value: string):
        self._set_package_builds.bind_string(1, value)
        self._set_package_builds.bind_string(2, package_name)
        self._set_package_builds.execute()

    func get_package(self, name: string) -> Package?:
        self._get_package.bind_string(1, name)

        if not self._get_package.fetch():
            return None

        package = Package(self._get_package.column_int(0),
                          self._get_package.column_string(1),
                          None,
                          [],
                          self._get_package.column_string(3),
                          self._get_package.column_int(4),
                          self._get_package.column_string(5))
        latest_release_id = self._get_package.column_int(2)
        self._get_package.fetch()

        if latest_release_id != -1:
            self._get_package_release_by_id.bind_int(1, latest_release_id)
            self._get_package_release_by_id.fetch()
            package.latest_release = Release(
                self._get_package_release_by_id.column_int(0),
                self._get_package_release_by_id.column_string(2),
                self._get_package_release_by_id.column_string(3))
            self._get_package_release_by_id.fetch()

        self._get_package_releases.bind_int(1, package.package_id)

        while self._get_package_releases.fetch():
            package.releases.append(Release(self._get_package_releases.column_int(1),
                                            self._get_package_releases.column_string(2),
                                            self._get_package_releases.column_string(3)))

        return package

    func get_packages(self) -> [string]:
        packages = []

        while self._get_packages.fetch():
            packages.append(self._get_packages.column_string(0))

        return packages

    func add_package_release(self,
                            package: Package,
                            version: string,
                            description: string):
        self._add_package_release.bind_int(1, package.package_id)
        self._add_package_release.bind_string(2, version)
        self._add_package_release.bind_string(3, description)
        self._add_package_release.execute()

    func get_package_release(self, package: Package, version: string) -> Release?:
        self._get_package_release.bind_int(1, package.package_id)
        self._get_package_release.bind_string(2, version)

        if not self._get_package_release.fetch():
            return None

        release = Release(self._get_package_release.column_int(0),
                          self._get_package_release.column_string(2),
                          self._get_package_release.column_string(3))
        self._get_package_release.fetch()

        return release

    func create_mys(self, token: string):
        self._create_mys.bind_string(1, token)
        self._create_mys.execute()

    func modify_mys(self, latest_release: MysRelease):
        self._modify_mys.bind_int(1, latest_release.release_id)
        self._modify_mys.execute()

    func get_mys(self) -> Mys?:
        if not self._get_mys.fetch():
            return None

        latest_release_id = self._get_mys.column_int(1)
        token = self._get_mys.column_string(2)
        self._get_mys.fetch()
        latest_release: MysRelease? = None

        if latest_release_id != -1:
            self._get_mys_release_by_id.bind_int(1, latest_release_id)
            self._get_mys_release_by_id.fetch()
            latest_release = MysRelease(
                self._get_mys_release_by_id.column_int(0),
                self._get_mys_release_by_id.column_string(1))
            self._get_mys_release_by_id.fetch()

        return Mys(latest_release, token)

    func add_mys_release(self, version: string):
        self._add_mys_release.bind_string(1, version)
        self._add_mys_release.execute()

    func get_mys_release(self, version: string) -> MysRelease?:
        self._get_mys_release.bind_string(1, version)

        if not self._get_mys_release.fetch():
            return None

        release = MysRelease(self._get_mys_release.column_int(0),
                             self._get_mys_release.column_string(1))
        self._get_mys_release.fetch()

        return release

    func remove_dependents(self, user: string):
        self._remove_dependents.bind_string(1, user)
        self._remove_dependents.execute()

    func add_dependent(self, package_name: string, user: string):
        self._add_dependent.bind_string(1, package_name)
        self._add_dependent.bind_string(2, user)
        self._add_dependent.execute()

    func get_dependents(self, package_name: string) -> [string]:
        self._get_dependents.bind_string(1, package_name)
        dependents = []

        while self._get_dependents.fetch():
            dependents.append(self._get_dependents.column_string(0))

        return dependents

    func clear_activities(self):
        self._clear_activities.execute()

    func add_activity(self, date: string, kind: string, message: string):
        self._add_activity.bind_string(1, date)
        self._add_activity.bind_string(2, kind)
        self._add_activity.bind_string(3, message)
        self._add_activity.execute()

    func get_activities(self) -> [(string, string, string)]:
        activities = []

        while self._get_activities.fetch():
            activities.append((self._get_activities.column_string(0),
                               self._get_activities.column_string(1),
                               self._get_activities.column_string(2)))

        return activities
