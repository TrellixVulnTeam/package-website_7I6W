from os.path import Path
from time import LocalDateTime
from .database import Database

class Activity:
    date: string
    kind: string
    message: string

class Activities:
    _database: Database
    _activities: [Activity]

    func __init__(self, database: Database):
        self._database = database
        self._activities = []

        for date, kind, message in self._database.get_activities():
            self._activities.append(Activity(date, kind, message))

    func save(self):
        self._database.clear_activities()

        for activity in self._activities:
            self._database.add_activity(activity.date, activity.kind, activity.message)

    func add(self, kind: string, message: string):
        self._activities.insert(0, Activity(str(LocalDateTime()), kind, message))

        if len(self._activities) > 50:
            self._activities.pop()

    func recent(self) -> [Activity]:
        return self._activities

func _create_database() -> Database:
    path = Path("test-database")
    path.rm(force=True)

    return Database(path)

@test
func test_restart():
    database = _create_database()

    # First boot.
    activities = Activities(database)
    activities.add("X", "First!")
    activities.add("X", "Second!")
    recent = activities.recent()
    assert recent[0].message == "Second!"
    assert recent[1].message == "First!"
    activities.save()

    # Second boot.
    activities = Activities(database)
    recent = activities.recent()
    assert recent[0].message == "Second!"
    assert recent[1].message == "First!"

@test
func test_drop_old_activity():
    database = _create_database()
    activities = Activities(database)

    for i in range(100):
        activities.add(str(i), str(2 * i))

    recent = activities.recent()
    assert recent[0].kind == "99"
    assert recent[0].message == "198"
    assert recent[-1].kind == "50"
    assert recent[-1].message == "100"
