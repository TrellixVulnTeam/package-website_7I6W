from fiber import Fiber
from fiber import Queue
from http import get as http_get
from http.header_parser import Request
from json import decode as json_decode
from json import Value as JsonValue
from time import LocalDateTime
from collections.fifo import Fifo
from . import Status
from .activities import Activities

RE_LOCATION: regex = re"^([\d.-]+),([\d.-]+)$"
RE_BOT: regex = re"bot"i

class Location:
    latitude: f64
    longitude: f64
    response_status: Status

class _ClientIpLookupFiber(Fiber):
    token: string
    queue: Queue[(string, i64)]
    locations: {string: Location}
    _locations_order: Fifo[string]

    func __init__(self, token: string, locations: {string: Location}):
        self.token = token
        # i64 instead of Status as generics does only work with common
        # types.
        self.queue = Queue[(string, i64)]()
        self.locations = locations
        self._locations_order = Fifo[string](100)

    func run(self):
        while True:
            client_ip_address, response_status = self.queue.get()

            if self.token is None:
                continue

            location = self.locations.get(client_ip_address, None)

            if location is not None:
                location.response_status = Status(response_status)
                continue

            try:
                content = string(http_get("ipinfo.io",
                                          80,
                                          f"/{client_ip_address}?token={self.token}",
                                          secure=False).content)

                mo = json_decode(content).get("loc").get_string().match(RE_LOCATION)

                if mo is None:
                    continue

                latitude = f64(mo.group(1))
                longitude = f64(mo.group(2))

                if self._locations_order.is_full():
                    self.locations.pop(self._locations_order.pop(), None)

                self.locations[client_ip_address] = Location(latitude,
                                                             longitude,
                                                             Status(response_status))
                self._locations_order.push(client_ip_address)
            except Error as e:
                print(e)

class OrderedCounter:
    order: Fifo[string]
    count: {string: i64}

    func __init__(self):
        self.order = Fifo[string](100)
        self.count = {}

    func increment(self, name: string):
        if name in self.count:
            self.count[name] += 1
        else:
            if self.order.is_full():
                self.count.pop(self.order.pop(), 0)

            self.count[name] = 1
            self.order.push(name)

class Statistics:
    start_date_time: LocalDateTime
    requests: OrderedCounter
    number_of_requests: i64
    next_number_of_requests_activity: i64
    locations: {string: Location}
    clients_ip_addresses: {string}
    client_ip_lookup_fiber: _ClientIpLookupFiber
    referrers: OrderedCounter
    no_idle_client_handlers: i64
    number_of_graphql_requests: i64
    activities: Activities

    func __init__(self, ipinfo_token: string, activities: Activities):
        self.activities = activities
        self.start_date_time = LocalDateTime()
        self.requests = OrderedCounter()
        self.number_of_requests = 0
        self.next_number_of_requests_activity = 10
        self.locations = {}
        self.clients_ip_addresses = {}
        self.referrers = OrderedCounter()
        self.no_idle_client_handlers = 0
        self.number_of_graphql_requests = 0
        self.client_ip_lookup_fiber = _ClientIpLookupFiber(ipinfo_token,
                                                           self.locations)
        self.client_ip_lookup_fiber.start()

    func handle_request(self, request: Request, response_status: Status):
        if request.method != "GET":
            return

        path = request.path

        if not (path.ends_with(".html") or path == "/"):
            return

        headers = request.headers

        if headers.get("user-agent", "bot").match(RE_BOT) is not None:
            return

        self.requests.increment(path)
        self.increment_number_of_requests()
        referrer = headers.get("referer", None)

        if referrer is not None:
            if not referrer.starts_with("https://mys-lang.org/"):
                self.referrers.increment(referrer)

        client_ip_address = headers.get("x-forwarded-for", None)

        if client_ip_address is not None:
            if len(self.clients_ip_addresses) < 100:
                self.clients_ip_addresses.add(client_ip_address)

            self.client_ip_lookup_fiber.queue.put((client_ip_address,
                                                   i64(response_status)))

    func increment_number_of_requests(self):
        self.number_of_requests += 1

        if self.number_of_requests == self.next_number_of_requests_activity:
            self.activities.add("ðŸ”¥", f"{self.number_of_requests} requests served.")
            self.next_number_of_requests_activity *= 10

    func unique_clients(self) -> string:
        count = len(self.clients_ip_addresses)

        if count < 100:
            return str(count)
        else:
            return f"{count} (capped)"

test bot_user_agent():
    statistics = Statistics(None, None)

    statistics.handle_request(
        Request("GET",
                "/",
                None,
                {},
                None,
                {
                    "user-agent": ("Mozilla/5.0 (compatible; bingbot/2.0; "
                                   "+http://www.bing.com/bingbot.htm)")
                }),
                Status.Ok)
    assert len(statistics.requests.count) == 0

    statistics.handle_request(
        Request("GET",
                "/",
                None,
                {},
                None,
                {
                    "user-agent": "Mozilla/5.0"
                }),
        Status.Ok)
    assert len(statistics.requests.count) == 1

    statistics.handle_request(
        Request("GET",
                "/",
                None,
                {},
                None,
                {
                }),
                Status.Ok)
    assert len(statistics.requests.count) == 1
