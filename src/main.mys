from argparse import Parser
from argparse import ValueType
from fiber import Event
from os.path import Path
from os.subprocess import run
from os.signal import enable as enable_signal
from os.signal import Signal
from net.tcp.server import Server
from .database import Database
from .graphql import GraphQL
from .statistics import Statistics
from .activities import Activities
from .client_handler_fiber import ClientHandlerFiber

func main(argv: [string]):
    enable_signal(Signal.Interrupt)

    parser = Parser(version=__version__)
    parser.add_option("--port",
                      short="-p",
                      default="8000",
                      help="Port to listen for clients on (default: 8000).")
    parser.add_option("--database-directory",
                      short="-d",
                      default=".",
                      value_type=ValueType.DirPath,
                      help="Database directory (default: \".\").")
    parser.add_option("--ipinfo-token",
                      short="-i",
                      takes_value=True,
                      help="ipinfo.io token.")
    args = parser.parse(argv)

    database = Database(Path(args.value_of("--database-directory")))
    statistics = Statistics(args.value_of("--ipinfo-token"))
    graphql = GraphQL(database, statistics)
    activities = Activities()

    client_handlers: [ClientHandlerFiber] = []
    idle_client_handlers: [i64] = []
    idle_client_handlers_ready = Event()

    for i in range(20):
        client_handlers.append(ClientHandlerFiber(database,
                                                  statistics,
                                                  graphql,
                                                  activities,
                                                  idle_client_handlers,
                                                  idle_client_handlers_ready,
                                                  i))
        client_handlers[-1].start()
        idle_client_handlers.append(i)

    server = Server()
    port = u32(args.value_of("--port"))
    server.listen(port)

    print(f"Listening for clients on port {port}.")

    try:
        while True:
            if len(idle_client_handlers) == 0:
                statistics.no_idle_client_handlers += 1
                idle_client_handlers_ready.clear()
                idle_client_handlers_ready.wait()

            client = server.accept()
            client_handler = client_handlers[idle_client_handlers.pop()]
            client_handler.serve_client(client)
    except InterruptError:
        print("Interrupted. Exiting.")

@test
func test_application():
    assert run("mys build -c").exit_code == 0
    result = run("cd tests && python3 test.py")
    print(string(result.stderr))
    assert result.exit_code == 0
